// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
enum UserType {
  User
  Admin
}

model User {
  id              String    @id @default(cuid())
  name            String?
  stnum           String?   @unique
  image           String?
  hashedpassword  String?
  accounts        Account[]
  sessions        Session[]
  favoriteids     String[]
  products        Product[]
  rankings        Ranking[]
  usertype        UserType @default(User)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id          String @id @default(cuid())
  title       String
  description String
  imageSrc    String
  category    String
  userId      String
  price       Int
  latitude    Float
  longitude   Float
  createAt    DateTime  @default(now())
  updateAt    DateTime  @updatedAt

  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Ranking {
  id          String @id @default(cuid())
  title       String
  imageSrc    String
  userId      String
  score       Int

  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}